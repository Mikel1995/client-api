"use strict";
// tslint:disable
/**
 * Virtual - API
 * API definition for Virtual
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualApi = exports.VirtualApiFactory = exports.VirtualApiFp = exports.VirtualApiAxiosParamCreator = exports.ReportedEventStateEnum = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var ReportedEventStateEnum;
(function (ReportedEventStateEnum) {
    ReportedEventStateEnum["Closed"] = "Closed";
    ReportedEventStateEnum["Cancelled"] = "Cancelled";
})(ReportedEventStateEnum = exports.ReportedEventStateEnum || (exports.ReportedEventStateEnum = {}));
/**
 * VirtualApi - axios parameter creator
 * @export
 */
exports.VirtualApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Events by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetEventsByChannel: (channel, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'channel' is not null or undefined
            if (channel === null || channel === undefined) {
                throw new base_1.RequiredError('channel', 'Required parameter channel was null or undefined when calling appHttpControllersVirtualControllerGetEventsByChannel.');
            }
            const localVarPath = `/getEventsByChannel`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get Macrotype by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetMacrotype: (channel, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'channel' is not null or undefined
            if (channel === null || channel === undefined) {
                throw new base_1.RequiredError('channel', 'Required parameter channel was null or undefined when calling appHttpControllersVirtualControllerGetMacrotype.');
            }
            const localVarPath = `/getMacrotype`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VirtualApi - functional programming interface
 * @export
 */
exports.VirtualApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get Events by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetEventsByChannel(channel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VirtualApiAxiosParamCreator(configuration).appHttpControllersVirtualControllerGetEventsByChannel(channel, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Get Macrotype by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetMacrotype(channel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VirtualApiAxiosParamCreator(configuration).appHttpControllersVirtualControllerGetMacrotype(channel, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * VirtualApi - factory interface
 * @export
 */
exports.VirtualApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get Events by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetEventsByChannel(channel, options) {
            return exports.VirtualApiFp(configuration).appHttpControllersVirtualControllerGetEventsByChannel(channel, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Macrotype by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetMacrotype(channel, options) {
            return exports.VirtualApiFp(configuration).appHttpControllersVirtualControllerGetMacrotype(channel, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VirtualApi - object-oriented interface
 * @export
 * @class VirtualApi
 * @extends {BaseAPI}
 */
class VirtualApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Events by given channel
     * @param {string} channel Desired Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualApi
     */
    appHttpControllersVirtualControllerGetEventsByChannel(channel, options) {
        return exports.VirtualApiFp(this.configuration).appHttpControllersVirtualControllerGetEventsByChannel(channel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Macrotype by given channel
     * @param {string} channel Desired Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualApi
     */
    appHttpControllersVirtualControllerGetMacrotype(channel, options) {
        return exports.VirtualApiFp(this.configuration).appHttpControllersVirtualControllerGetMacrotype(channel, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VirtualApi = VirtualApi;
