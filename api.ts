// tslint:disable
/**
 * Virtual - API
 * API definition for Virtual
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface EventsResponse
 */
export interface EventsResponse {
    /**
     * 
     * @type {Macrotype}
     * @memberof EventsResponse
     */
    macrotype?: Macrotype;
    /**
     * 
     * @type {Array<OpenEvent>}
     * @memberof EventsResponse
     */
    openEvents?: Array<OpenEvent>;
    /**
     * 
     * @type {Array<ReportedEvent>}
     * @memberof EventsResponse
     */
    reportedEvents?: Array<ReportedEvent>;
}
/**
 * 
 * @export
 * @interface Macrotype
 */
export interface Macrotype {
    /**
     * 
     * @type {string}
     * @memberof Macrotype
     */
    macrotype?: string;
    /**
     * 
     * @type {string}
     * @memberof Macrotype
     */
    currentTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Macrotype
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Macrotype
     */
    sport?: string;
    /**
     * 
     * @type {string}
     * @memberof Macrotype
     */
    time?: string;
    /**
     * 
     * @type {string}
     * @memberof Macrotype
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface Market
 */
export interface Market {
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    description?: string;
    /**
     * 
     * @type {Array<Selection>}
     * @memberof Market
     */
    selections?: Array<Selection>;
}
/**
 * 
 * @export
 * @interface OpenEvent
 */
export interface OpenEvent {
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    schedule?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    event?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    time?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    competition?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    sport?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    event_color_primary?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    event_color_secondary?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEvent
     */
    provider?: string;
    /**
     * 
     * @type {Array<Market>}
     * @memberof OpenEvent
     */
    markets?: Array<Market>;
}
/**
 * 
 * @export
 * @interface Position
 */
export interface Position {
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    position?: number;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    selection_code?: string;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    color?: string;
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    odd?: number;
}
/**
 * 
 * @export
 * @interface ReportedEvent
 */
export interface ReportedEvent {
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    schedule?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    event?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    time?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    startTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    competition?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    sport?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    event_color_primary?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    event_color_secondary?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    fixture?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    provider?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    channel?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    progr?: string;
    /**
     * 
     * @type {number}
     * @memberof ReportedEvent
     */
    placement_first?: number;
    /**
     * 
     * @type {number}
     * @memberof ReportedEvent
     */
    placement_odd?: number;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    report_datetime?: string;
    /**
     * 
     * @type {Array<Position>}
     * @memberof ReportedEvent
     */
    ordered_results?: Array<Position>;
    /**
     * 
     * @type {Array<Result>}
     * @memberof ReportedEvent
     */
    results?: Array<Result>;
    /**
     * 
     * @type {Array<ReportedEvent>}
     * @memberof ReportedEvent
     */
    events?: Array<ReportedEvent>;
    /**
     * 
     * @type {string}
     * @memberof ReportedEvent
     */
    state?: ReportedEventStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportedEventStateEnum {
    Closed = 'Closed',
    Cancelled = 'Cancelled'
}

/**
 * 
 * @export
 * @interface Result
 */
export interface Result {
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    selection?: string;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    odd?: number;
}
/**
 * 
 * @export
 * @interface Selection
 */
export interface Selection {
    /**
     * 
     * @type {string}
     * @memberof Selection
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Selection
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Selection
     */
    odd?: number;
}
/**
 * 
 * @export
 * @interface Sport
 */
export interface Sport {
    /**
     * 
     * @type {string}
     * @memberof Sport
     */
    schedule?: string;
    /**
     * 
     * @type {string}
     * @memberof Sport
     */
    sport?: string;
    /**
     * 
     * @type {string}
     * @memberof Sport
     */
    sport_code?: string;
    /**
     * 
     * @type {Array<ReportedEvent>}
     * @memberof Sport
     */
    events?: Array<ReportedEvent>;
}

/**
 * VirtualApi - axios parameter creator
 * @export
 */
export const VirtualApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Events by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetEventsByChannel: async (channel: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channel' is not null or undefined
            if (channel === null || channel === undefined) {
                throw new RequiredError('channel','Required parameter channel was null or undefined when calling appHttpControllersVirtualControllerGetEventsByChannel.');
            }
            const localVarPath = `/getEventsByChannel`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Macrotype by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetMacrotype: async (channel: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channel' is not null or undefined
            if (channel === null || channel === undefined) {
                throw new RequiredError('channel','Required parameter channel was null or undefined when calling appHttpControllersVirtualControllerGetMacrotype.');
            }
            const localVarPath = `/getMacrotype`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VirtualApi - functional programming interface
 * @export
 */
export const VirtualApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Events by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appHttpControllersVirtualControllerGetEventsByChannel(channel: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsResponse>> {
            const localVarAxiosArgs = await VirtualApiAxiosParamCreator(configuration).appHttpControllersVirtualControllerGetEventsByChannel(channel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Macrotype by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appHttpControllersVirtualControllerGetMacrotype(channel: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Macrotype>> {
            const localVarAxiosArgs = await VirtualApiAxiosParamCreator(configuration).appHttpControllersVirtualControllerGetMacrotype(channel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VirtualApi - factory interface
 * @export
 */
export const VirtualApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get Events by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetEventsByChannel(channel: string, options?: any): AxiosPromise<EventsResponse> {
            return VirtualApiFp(configuration).appHttpControllersVirtualControllerGetEventsByChannel(channel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Macrotype by given channel
         * @param {string} channel Desired Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appHttpControllersVirtualControllerGetMacrotype(channel: string, options?: any): AxiosPromise<Macrotype> {
            return VirtualApiFp(configuration).appHttpControllersVirtualControllerGetMacrotype(channel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VirtualApi - object-oriented interface
 * @export
 * @class VirtualApi
 * @extends {BaseAPI}
 */
export class VirtualApi extends BaseAPI {
    /**
     * 
     * @summary Get Events by given channel
     * @param {string} channel Desired Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualApi
     */
    public appHttpControllersVirtualControllerGetEventsByChannel(channel: string, options?: any) {
        return VirtualApiFp(this.configuration).appHttpControllersVirtualControllerGetEventsByChannel(channel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Macrotype by given channel
     * @param {string} channel Desired Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualApi
     */
    public appHttpControllersVirtualControllerGetMacrotype(channel: string, options?: any) {
        return VirtualApiFp(this.configuration).appHttpControllersVirtualControllerGetMacrotype(channel, options).then((request) => request(this.axios, this.basePath));
    }

}


